// <auto-generated />
using System;
using BlogCMS.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlogCMS.Core.Migrations
{
    [DbContext(typeof(BlogCMSContext))]
    [Migration("20181019124156_SettingUpdate1")]
    partial class SettingUpdate1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlogCMS.Entites.Conrete.Authorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Authorizations");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(2018, 10, 19, 15, 41, 56, 585, DateTimeKind.Local), Name = "SuperAdmin", UpdatedAt = new DateTime(2018, 10, 19, 15, 41, 56, 585, DateTimeKind.Local) },
                        new { Id = 2, CreatedAt = new DateTime(2018, 10, 19, 15, 41, 56, 585, DateTimeKind.Local), Name = "Admin", UpdatedAt = new DateTime(2018, 10, 19, 15, 41, 56, 585, DateTimeKind.Local) },
                        new { Id = 3, CreatedAt = new DateTime(2018, 10, 19, 15, 41, 56, 585, DateTimeKind.Local), Name = "Author", UpdatedAt = new DateTime(2018, 10, 19, 15, 41, 56, 585, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("BlogCMS.Entites.Conrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<int?>("ParentCommentId");

                    b.Property<int?>("PostId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BlogCMS.Entites.Conrete.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cover");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Icon");

                    b.Property<string>("Name");

                    b.Property<int?>("Order");

                    b.Property<int?>("ParentMenuId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("BlogCMS.Entites.Conrete.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<string>("Cover");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Icon");

                    b.Property<int?>("MenuId");

                    b.Property<string>("Name");

                    b.Property<string>("Shortly");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("BlogCMS.Entites.Conrete.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Analystic");

                    b.Property<string>("Copyright");

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Description");

                    b.Property<string>("Facebook");

                    b.Property<string>("Fax1");

                    b.Property<string>("Fax2");

                    b.Property<string>("Flickr");

                    b.Property<string>("Github");

                    b.Property<string>("Google");

                    b.Property<string>("Gsm1");

                    b.Property<string>("Gsm2");

                    b.Property<string>("Instagram");

                    b.Property<string>("Linkedin");

                    b.Property<string>("Logo");

                    b.Property<string>("Mail1");

                    b.Property<string>("Mail2");

                    b.Property<string>("Maps");

                    b.Property<string>("Pinterest");

                    b.Property<string>("Province");

                    b.Property<string>("Recapctha");

                    b.Property<string>("Reddit");

                    b.Property<string>("SMTPHost");

                    b.Property<string>("SMTPPassword");

                    b.Property<string>("SMTPPort");

                    b.Property<string>("SMTPUser");

                    b.Property<string>("SiteTitle");

                    b.Property<string>("Slogan");

                    b.Property<string>("Snapchat");

                    b.Property<string>("Tel1");

                    b.Property<string>("Tel2");

                    b.Property<string>("Tumblr");

                    b.Property<string>("Twitter");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("Url");

                    b.Property<string>("Whatsapp");

                    b.Property<string>("Youtube");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new { Id = 1, Address = "3.Defne Sok. Yeşilpınar Mah. No:5 Daire:3", Analystic = "Google Analytic", Copyright = "Ahmet Emin ŞİTe Aittir.", Country = "İstanbul", CreatedAt = new DateTime(2018, 10, 19, 15, 41, 56, 582, DateTimeKind.Local), Description = "Site Açıklaması Burada", Facebook = "Facebook Adresiniz", Fax1 = "0000 000 0000", Fax2 = "0000 000 0000", Flickr = "Flickr Adresiniz", Github = "Github Adresiniz.", Google = "Google Adresiniz.", Gsm1 = "0546 245 9882", Gsm2 = "0000 000 0000", Instagram = "Instagram Adresiniz.", Linkedin = "Linkedin Adresiniz.", Logo = "https://upload.wikimedia.org/wikipedia/commons/2/2f/Logo_TV_2015.svg.", Mail1 = "0000 000 0000", Mail2 = "0000 000 0000", Maps = "Google Maps", Pinterest = "Pinterest Adresiniz.", Province = "Eyüpsultan", Recapctha = "Google Recapctha", Reddit = "Reddit Adresiniz.", SMTPHost = "Host", SMTPPassword = "Pass", SMTPPort = "Port", SMTPUser = "User", SiteTitle = "Site Title", Slogan = "Slogan Buraya", Snapchat = "Snapchat Adresiniz.", Tel1 = "0212 626 4707", Tel2 = "0000 000 0000", Tumblr = "Tumblr Adresiniz.", Twitter = "Twitter Adresiniz.", UpdatedAt = new DateTime(2018, 10, 19, 15, 41, 56, 582, DateTimeKind.Local), Url = "URL Buraya", Whatsapp = "Whatsapp Adresiniz.", Youtube = "Youtube Adresiniz." }
                    );
                });

            modelBuilder.Entity("BlogCMS.Entites.Conrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorizationId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, AuthorizationId = 1, CreatedAt = new DateTime(2018, 10, 19, 15, 41, 56, 585, DateTimeKind.Local), Email = "sitahmetemin@gmail.com", Name = "Ahmet Emin ŞİT", Password = "123654", UpdatedAt = new DateTime(2018, 10, 19, 15, 41, 56, 585, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("BlogCMS.Entites.Conrete.Comment", b =>
                {
                    b.HasOne("BlogCMS.Entites.Conrete.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("BlogCMS.Entites.Conrete.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId");

                    b.HasOne("BlogCMS.Entites.Conrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BlogCMS.Entites.Conrete.Menu", b =>
                {
                    b.HasOne("BlogCMS.Entites.Conrete.Menu", "ParentMenu")
                        .WithMany()
                        .HasForeignKey("ParentMenuId");
                });

            modelBuilder.Entity("BlogCMS.Entites.Conrete.Post", b =>
                {
                    b.HasOne("BlogCMS.Entites.Conrete.Menu", "Menu")
                        .WithMany("Posts")
                        .HasForeignKey("MenuId");

                    b.HasOne("BlogCMS.Entites.Conrete.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BlogCMS.Entites.Conrete.User", b =>
                {
                    b.HasOne("BlogCMS.Entites.Conrete.Authorization", "Authorization")
                        .WithMany("Users")
                        .HasForeignKey("AuthorizationId");
                });
#pragma warning restore 612, 618
        }
    }
}
